{
  "contractName": "Token",
  "abi": [],
  "bytecode": "0x3360005561032b806100126000396000f3fe6100093415610324565b60003560e01c806370a082311461010257806318160ddd146100f6578063a9059cbb146100dd57806323b872dd146100bc578063095ea7b3146100a3578063dd62ed3e14610082576340c10f191461006057600080fd5b61007861006b6102c5565b610073610281565b610119565b6100806102ec565b005b5061008061009e6100916102ab565b610099610281565b6102f8565b6102e1565b506100786100af6102c5565b6100b7610281565b610184565b506100786100c86102d3565b6100d06102ab565b6100d8610281565b6101d8565b506100786100e96102c5565b6100f1610281565b610177565b506100806001546102e1565b5061008061009e610111610281565b611000015490565b9060009033825414156101705761013281600154610313565b6001558261100001610145828254610313565b905581527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef602082a3565b5091505080fd5b906101829133610214565b565b9081156101d057806101a3833361100001600052602052604060002090565b55600052337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560206000a3565b505050600080fd5b91906101f1338461100001600052602052604060002090565b92835493848411610209578361018295039055610214565b505050505050600080fd5b90918215610278576110008281019081549182841161026c578386930390550161023f828254610313565b90556000527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60206000a3565b50505050505050600080fd5b50505050600080fd5b602436106102a557600435906001600160a01b0319821661029e57565b5050600080fd5b50600080fd5b6102b36102c5565b906001600160a01b0319821661029e57565b604436106102a55760243590565b606436106102a55760443590565b905060005260206000f35b50600160005260206000f35b9061030f9161100001600052602052604060002090565b5490565b808201929183109083101761029e57565b156102a55756",
  "deployedBytecode": "0x6100093415610324565b60003560e01c806370a082311461010257806318160ddd146100f6578063a9059cbb146100dd57806323b872dd146100bc578063095ea7b3146100a3578063dd62ed3e14610082576340c10f191461006057600080fd5b61007861006b6102c5565b610073610281565b610119565b6100806102ec565b005b5061008061009e6100916102ab565b610099610281565b6102f8565b6102e1565b506100786100af6102c5565b6100b7610281565b610184565b506100786100c86102d3565b6100d06102ab565b6100d8610281565b6101d8565b506100786100e96102c5565b6100f1610281565b610177565b506100806001546102e1565b5061008061009e610111610281565b611000015490565b9060009033825414156101705761013281600154610313565b6001558261100001610145828254610313565b905581527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef602082a3565b5091505080fd5b906101829133610214565b565b9081156101d057806101a3833361100001600052602052604060002090565b55600052337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560206000a3565b505050600080fd5b91906101f1338461100001600052602052604060002090565b92835493848411610209578361018295039055610214565b505050505050600080fd5b90918215610278576110008281019081549182841161026c578386930390550161023f828254610313565b90556000527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60206000a3565b50505050505050600080fd5b50505050600080fd5b602436106102a557600435906001600160a01b0319821661029e57565b5050600080fd5b50600080fd5b6102b36102c5565b906001600160a01b0319821661029e57565b604436106102a55760243590565b606436106102a55760443590565b905060005260206000f35b50600160005260206000f35b9061030f9161100001600052602052604060002090565b5490565b808201929183109083101761029e57565b156102a55756",
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "89:8:0:-:0;86:1;79:19;174;151:21;;86:1;139:55;86:1;203:30",
  "deployedSourceMap": "338:28:0:-:0;353:11;346:19;338:28;:::i;:::-;2722:1;2709:15;2705:81;;436:116;441:10;436:116;;;565:95;570:10;565:95;;;673:156;678:10;673:156;;;842:192;847:10;842:192;;;1047:154;1052:10;1047:154;;;1214:144;1219:10;1214:144;;;1376:10;1371:148;;;2722:1;1558:12;;1417:102;1435:41;1460:15;;:::i;:::-;1440:18;;:::i;:::-;1435:41;:::i;:::-;1493:12;;:::i;:::-;406:1178;1265:93;1324:18;1283:61;1294:49;1324:18;;:::i;:::-;1304;;:::i;:::-;1294:49;:::i;:::-;1283:61;:::i;1096:105::-;1142:15;1114:44;1142:15;;:::i;:::-;1122:18;;:::i;:::-;1114:44;:::i;904:130::-;975:15;922:69;975:15;;:::i;:::-;955:18;;:::i;:::-;935;;:::i;:::-;922:69;:::i;723:106::-;770:15;741:45;770:15;;:::i;:::-;750:18;;:::i;:::-;741:45;:::i;603:57::-;5052:23;621:25;4443:1;5052:23;621:25;:::i;479:73::-;518:18;497:41;508:29;518:18;;:::i;:::-;4542:6;4538:20;5291:38;5231:112;;1598:218;;-1:-1:-1;6891:8:0;;4947:17;;6879:21;7069:17;7066:37;;5173:30;5052:23;4443:1;5052:23;5173:30;:::i;:::-;4443:1;5148:56;4538:20;4542:6;4538:20;5490:30;5498:13;;;5490:30;:::i;:::-;5475:46;;4190:21;;3713:66;4236:4;4228:48;;1598:218::o;7087:16::-;7089:12;;;;;;1829:99;;1877:37;1829:99;1893:8;1877:37;:::i;:::-;1829:99::o;1941:206::-;;7069:17;;7066:37;;2051:8;6036:40;2051:8;;4542:6;4538:20;4728:1;4721:17;4762:4;4755:21;4816:4;4728:1;4803:18;4585:250;;6036:40;6029:56;4197:1;4190:21;2051:8;3949:66;4236:4;4197:1;4228:48;1941:206::o;7087:16::-;7089:12;;;7099:1;7089:12;;2160:165;;;6199:40;2244:8;6199:40;4542:6;4538:20;4728:1;4721:17;4762:4;4755:21;4816:4;4728:1;4803:18;4585:250;;6199:40;6280:13;;;6550:8;;;;7066:37;;6380:29;2278:33;6380:29;;6365:45;;2278:33;:::i;7087:16::-;7089:12;;;;;;7099:1;7089:12;;2339:234;;;7069:17;;7066:37;;4542:6;4538:20;;;5683:13;;;6550:8;;;;7066:37;;5770:16;;;;5755:32;;4538:20;5490:30;5498:13;;;5490:30;:::i;:::-;5475:46;;4197:1;4190:21;3713:66;4236:4;4197:1;4228:48;2339:234::o;7087:16::-;7089:12;;;;;;;7099:1;7089:12;;7087:16;7089:12;;;;7099:1;7089:12;;2814:239;3194:14;3178;3175:34;3172:90;;3134:1;3284:17;;-1:-1:-1;;;;;;2929:55:0;;2912:127;;2814:239::o;2987:52::-;3009:12;;-1:-1:-1;3009:12:0;;3210:52;3232:12;-1:-1:-1;3232:12:0;;2814:239;2875:20;;:::i;:::-;2936:47;-1:-1:-1;;;;;;2929:55:0;;2912:127;;2814:239::o;3066:249::-;3194:14;3178;3175:34;3172:90;;3130:25;3284:17;3066:249;:::o;:::-;3194:14;3178;3175:34;3172:90;;3130:25;3284:17;3066:249;:::o;3396:99::-;;;3444:1;3437:12;3476:4;3444:1;3466:15;3508:67;;3559:1;3444;3437:12;3476:4;3444:1;3466:15;5814:136;;5895:40;5814:136;4542:6;4538:20;4728:1;4721:17;4762:4;4755:21;4816:4;4728:1;4803:18;4585:250;;5895:40;5889:47;5814:136;:::o;6676:133::-;6727:9;;;;;6769:8;;6759;;;6756:22;6753:42;;6676:133::o;7020:97::-;7069:17;7066:37;;7020:97::o",
  "source": "object \"Token\" {\n    code {\n        // Store the creator in slot zero.\n        sstore(0, caller())\n\n        // Deploy the contract\n        datacopy(0, dataoffset(\"runtime\"), datasize(\"runtime\"))\n        return(0, datasize(\"runtime\"))\n    }\n    object \"runtime\" {\n        code {\n            // Protection against sending Ether\n            require(iszero(callvalue()))\n\n            // Dispatcher\n            switch selector()\n            case 0x70a08231 /* \"balanceOf(address)\" */ {\n                returnUint(balanceOf(decodeAsAddress(0)))\n            }\n            case 0x18160ddd /* \"totalSupply()\" */ {\n                returnUint(totalSupply())\n            }\n            case 0xa9059cbb /* \"transfer(address,uint256)\" */ {\n                transfer(decodeAsAddress(0), decodeAsUint(1))\n                returnTrue()\n            }\n            case 0x23b872dd /* \"transferFrom(address,address,uint256)\" */ {\n                transferFrom(decodeAsAddress(0), decodeAsAddress(1), decodeAsUint(2))\n                returnTrue()\n            }\n            case 0x095ea7b3 /* \"approve(address,uint256)\" */ {\n                approve(decodeAsAddress(0), decodeAsUint(1))\n                returnTrue()\n            }\n            case 0xdd62ed3e /* \"allowance(address,address)\" */ {\n                returnUint(allowance(decodeAsAddress(0), decodeAsAddress(1)))\n            }\n            case 0x40c10f19 /* \"mint(address,uint256)\" */ {\n                mint(decodeAsAddress(0), decodeAsUint(1))\n                returnTrue()\n            }\n            default {\n                revert(0, 0)\n            }\n\n            function mint(account, amount) {\n                require(calledByOwner())\n\n                mintTokens(amount)\n                addToBalance(account, amount)\n                emitTransfer(0, account, amount)\n            }\n            function transfer(to, amount) {\n                executeTransfer(caller(), to, amount)\n            }\n            function approve(spender, amount) {\n                revertIfZeroAddress(spender)\n                setAllowance(caller(), spender, amount)\n                emitApproval(caller(), spender, amount)\n            }\n            function transferFrom(from, to, amount) {\n                decreaseAllowanceBy(from, caller(), amount)\n                executeTransfer(from, to, amount)\n            }\n\n            function executeTransfer(from, to, amount) {\n                revertIfZeroAddress(to)\n                deductFromBalance(from, amount)\n                addToBalance(to, amount)\n                emitTransfer(from, to, amount)\n            }\n\n\n            /* ---------- calldata decoding functions ----------- */\n            function selector() -> s {\n                s := div(calldataload(0), 0x100000000000000000000000000000000000000000000000000000000)\n            }\n\n            function decodeAsAddress(offset) -> v {\n                v := decodeAsUint(offset)\n                if iszero(iszero(and(v, not(0xffffffffffffffffffffffffffffffffffffffff)))) {\n                    revert(0, 0)\n                }\n            }\n            function decodeAsUint(offset) -> v {\n                let pos := add(4, mul(offset, 0x20))\n                if lt(calldatasize(), add(pos, 0x20)) {\n                    revert(0, 0)\n                }\n                v := calldataload(pos)\n            }\n            /* ---------- calldata encoding functions ---------- */\n            function returnUint(v) {\n                mstore(0, v)\n                return(0, 0x20)\n            }\n            function returnTrue() {\n                returnUint(1)\n            }\n\n            /* -------- events ---------- */\n            function emitTransfer(from, to, amount) {\n                let signatureHash := 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n                emitEvent(signatureHash, from, to, amount)\n            }\n            function emitApproval(from, spender, amount) {\n                let signatureHash := 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n                emitEvent(signatureHash, from, spender, amount)\n            }\n            function emitEvent(signatureHash, indexed1, indexed2, nonIndexed) {\n                mstore(0, nonIndexed)\n                log3(0, 0x20, signatureHash, indexed1, indexed2)\n            }\n\n            /* -------- storage layout ---------- */\n            function ownerPos() -> p { p := 0 }\n            function totalSupplyPos() -> p { p := 1 }\n            function accountToStorageOffset(account) -> offset {\n                offset := add(0x1000, account)\n            }\n            function allowanceStorageOffset(account, spender) -> offset {\n                offset := accountToStorageOffset(account)\n                mstore(0, offset)\n                mstore(0x20, spender)\n                offset := keccak256(0, 0x40)\n            }\n\n            /* -------- storage access ---------- */\n            function owner() -> o {\n                o := sload(ownerPos())\n            }\n            function totalSupply() -> supply {\n                supply := sload(totalSupplyPos())\n            }\n            function mintTokens(amount) {\n                sstore(totalSupplyPos(), safeAdd(totalSupply(), amount))\n            }\n            function balanceOf(account) -> bal {\n                bal := sload(accountToStorageOffset(account))\n            }\n            function addToBalance(account, amount) {\n                let offset := accountToStorageOffset(account)\n                sstore(offset, safeAdd(sload(offset), amount))\n            }\n            function deductFromBalance(account, amount) {\n                let offset := accountToStorageOffset(account)\n                let bal := sload(offset)\n                require(lte(amount, bal))\n                sstore(offset, sub(bal, amount))\n            }\n            function allowance(account, spender) -> amount {\n                amount := sload(allowanceStorageOffset(account, spender))\n            }\n            function setAllowance(account, spender, amount) {\n                sstore(allowanceStorageOffset(account, spender), amount)\n            }\n            function decreaseAllowanceBy(account, spender, amount) {\n                let offset := allowanceStorageOffset(account, spender)\n                let currentAllowance := sload(offset)\n                require(lte(amount, currentAllowance))\n                sstore(offset, sub(currentAllowance, amount))\n            }\n\n            /* ---------- utility functions ---------- */\n            function lte(a, b) -> r {\n                r := iszero(gt(a, b))\n            }\n            function gte(a, b) -> r {\n                r := iszero(lt(a, b))\n            }\n            function safeAdd(a, b) -> r {\n                r := add(a, b)\n                if or(lt(r, a), lt(r, b)) { revert(0, 0) }\n            }\n            function calledByOwner() -> cbo {\n                cbo := eq(owner(), caller())\n            }\n            function revertIfZeroAddress(addr) {\n                require(addr)\n            }\n            function require(condition) {\n                if iszero(condition) { revert(0, 0) }\n            }\n        }\n    }\n}",
  "sourcePath": "/home/johann/Documents/Code/Yul Oven/contracts/Token.yul",
  "compiler": {
    "name": "solc",
    "version": "0.8.10+commit.fc410830.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.3",
  "updatedAt": "2021-12-06T15:12:26.294Z"
}